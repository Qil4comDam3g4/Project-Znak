import logging
import psycopg2  # type: ignore
from reportlab.lib.pagesizes import letter  # type: ignore
from reportlab.pdfgen import canvas  # type: ignore
from telegram import Update  # type: ignore
from telegram.ext import Updater, CommandHandler, CallbackContext  # type: ignore
import requests  # type: ignore
import os
import json
from typing import List, Dict, Optional, Any, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME', 'CentralDB'),
    'user': os.getenv('DB_USER', 'admin'),
    'password': os.getenv('DB_PASSWORD', '0x75937$$xb'),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432')
}

# URL Go-—Å–µ—Ä–≤–∏—Å–∞
GO_SERVICE_URL = os.getenv('GO_SERVICE_URL', "http://localhost:8080")
API_KIZS_ENDPOINT = "/api/v1/kizs"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å Go-—Å–µ—Ä–≤–∏—Å–æ–º
API_PAYMENTS_ENDPOINT = "/api/v1/payments"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç

def create_connection():
    #"""–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        return psycopg2.connect(**DB_CONFIG)
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def generate_pdf(gtin_data: List[str], filename: str) -> None:
   #"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º GTIN."""
    try:
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        for index, gtin in enumerate(gtin_data):
            c.drawString(100, height - (index + 1) * 20, f"GTIN: {gtin}")
        c.save()
        logger.info(f"PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        raise

def add_user(username: str, email: str, price: float) -> bool:
    #"""–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = create_connection()
    if conn is None:
        return False
    
    try:
        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    'INSERT INTO users (username, email, price) VALUES (%s, %s, %s)',
                    (username, email, price)
                )
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        if conn:
            conn.close()

def create_payment(amount: float, order_id: str, telegram_id: int) -> Optional[str]:
    #"""–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Go-—Å–µ—Ä–≤–∏—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    data = {"amount": amount, "order_id": order_id}
    try:
        response = requests.post(
            f"{GO_SERVICE_URL}{API_PAYMENTS_ENDPOINT}",
            json=data,
            params={"telegram_id": telegram_id},
            timeout=10  # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        )
        response.raise_for_status()
        result = response.json()
        
        if result.get("status") == "success":
            return result.get("payment_url")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Robokassa: {result.get('message')}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞: {e}")
        return None

def request_kiz_command(update: Update, context: CallbackContext) -> None:
    #"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /requestkiz –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ö–ò–ó."""
    if len(context.args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /requestkiz <gtin1> <–∫–æ–ª-–≤–æ1> [<gtin2> <–∫–æ–ª-–≤–æ2>...] [inn <–ò–ù–ù>]")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    gtin_data = []
    inn = ""
    telegram_id = update.effective_user.id

    i = 0
    while i < len(context.args):
        if context.args[i].lower() == "inn" and i + 1 < len(context.args):
            inn = context.args[i+1]
            i += 2
            continue
        try:
            gtin, count = context.args[i], int(context.args[i+1])
            gtin_data.append({"gtin": gtin, "count": count})
            i += 2
        except (ValueError, IndexError):
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not gtin_data:
        update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω GTIN —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.")
        return
    
    if not inn:
        update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ò–ù–ù (inn <–Ω–æ–º–µ—Ä>).")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Go-—Å–µ—Ä–≤–∏—Å
    try:
        response = requests.post(
            f"{GO_SERVICE_URL}{API_KIZS_ENDPOINT}",
            json={"gtin_data": gtin_data, "inn": inn},
            params={"telegram_id": telegram_id},
            timeout=30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ö–ò–ó
        )
        response.raise_for_status()
        result = response.json()
        
        if result.get("status") == "success":
            message = result.get("message", "‚úÖ –ö–ò–ó—ã –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–ò–ó–∞—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "kizs" in result and result["kizs"]:
                kizs_list = result["kizs"]
                if len(kizs_list) > 10:
                    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    message += f"\n–ü–æ–ª—É—á–µ–Ω–æ {len(kizs_list)} –ö–ò–ó–æ–≤. –ü–µ—Ä–≤—ã–µ 10:\n" + "\n".join(kizs_list[:10]) + "\n..."
                else:
                    message += "\n–°–ø–∏—Å–æ–∫ –ö–ò–ó:\n" + "\n".join(kizs_list)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            if "file_paths" in result and result["file_paths"]:
                message += "\n–§–∞–π–ª—ã: " + ", ".join(result["file_paths"])
            
            update.message.reply_text(message)
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ö–ò–ó: {e}")
        update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞: {e}")
        update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def start(update: Update, context: CallbackContext) -> None:
    #"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ß–µ—Å—Ç–Ω—ã–º –ó–ù–ê–ö–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/requestkiz - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ö–ò–ó—ã\n"
        "/pay - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂"
    )

def pay_command(update: Update, context: CallbackContext) -> None:
    #"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pay –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
    if not context.args or len(context.args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay <—Å—É–º–º–∞> <ID –∑–∞–∫–∞–∑–∞>")
        return

    try:
        amount = float(context.args[0])
        if amount <= 0:
            update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
            
        order_id = context.args[1]
        telegram_id = update.effective_user.id
        
        update.message.reply_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
        
        payment_url = create_payment(amount, order_id, telegram_id)
        if payment_url:
            update.message.reply_text(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}")
        else:
            update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /pay 100.50 order123")
    except IndexError:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay <—Å—É–º–º–∞> <ID –∑–∞–∫–∞–∑–∞>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –æ–ø–ª–∞—Ç—ã: {e}")
        update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main() -> None:
    #"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    token = os.getenv('7653712411:AAEcbimjAVzEG0uQSOiPUr5OCs8EnhyEVL0')
    if not token:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è 7653712411:AAEcbimjAVzEG0uQSOiPUr5OCs8EnhyEVL0")
        return
        
    try:
        updater = Updater(token)
        dp = updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("requestkiz", request_kiz_command))
        dp.add_handler(CommandHandler("pay", pay_command))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        updater.idle()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()